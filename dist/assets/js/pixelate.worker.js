!function(e){var t=this.webpackHotUpdate;this.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!x[e])return;for(var n in x[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===v&&O()}(e,n),t&&t(e,n)};var n,r=!0,o="f8bc80a521fa6041b979",i=1e4,a={},c=[],d=[];function s(e){var t=I[e];if(!t)return j;var r=function(r){return t.hot.active?(I[r]?-1===I[r].parents.indexOf(e)&&I[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),j(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return j[e]},set:function(t){j[e]=t}}};for(var i in j)Object.prototype.hasOwnProperty.call(j,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===u&&p("prepare"),v++,j.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===u&&(m[e]||D(e),0===v&&0===g&&O())}},r.t=function(e,t){return 1&t&&(e=r(e)),j.t(e,-2&t)},r}var l=[],u="idle";function p(e){u=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,y,g=0,v=0,m={},x={},b={};function w(e){return+e+""===e?+e:e}function P(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,p("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=j.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return p("idle"),null;x={},m={},b=e.c,y=e.h,p("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return D(0),"prepare"===u&&0===v&&0===g&&O(),t})}function D(e){b[e]?(x[e]=!0,g++,function(e){importScripts(j.p+""+e+"."+o+".hot-update.js")}(e)):m[e]=!0}function O(){p("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return _(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function _(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var n,r,i,d,s;function l(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((d=I[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var c=0;c<d.parents.length;c++){var s=d.parents[c],l=I[s];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([s]),moduleId:i,parentId:s};-1===t.indexOf(s)&&(l.hot._acceptedDependencies[i]?(n[s]||(n[s]=[]),f(n[s],[i])):(delete n[s],t.push(s),r.push({chain:a.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},v=[],m={},x=function(){console.warn("[HMR] unexpected require("+D.moduleId+") to disposed module")};for(var P in h)if(Object.prototype.hasOwnProperty.call(h,P)){var D;s=w(P);var O=!1,_=!1,k=!1,E="";switch((D=h[P]?l(s):{type:"disposed",moduleId:P}).chain&&(E="\nUpdate propagation: "+D.chain.join(" -> ")),D.type){case"self-declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||(O=new Error("Aborted because of self decline: "+D.moduleId+E));break;case"declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||(O=new Error("Aborted because of declined dependency: "+D.moduleId+" in "+D.parentId+E));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(D),t.ignoreUnaccepted||(O=new Error("Aborted because "+s+" is not accepted"+E));break;case"accepted":t.onAccepted&&t.onAccepted(D),_=!0;break;case"disposed":t.onDisposed&&t.onDisposed(D),k=!0;break;default:throw new Error("Unexception type "+D.type)}if(O)return p("abort"),Promise.reject(O);if(_)for(s in m[s]=h[s],f(v,D.outdatedModules),D.outdatedDependencies)Object.prototype.hasOwnProperty.call(D.outdatedDependencies,s)&&(g[s]||(g[s]=[]),f(g[s],D.outdatedDependencies[s]));k&&(f(v,[D.moduleId]),m[s]=x)}var H,M=[];for(r=0;r<v.length;r++)s=v[r],I[s]&&I[s].hot._selfAccepted&&M.push({module:s,errorHandler:I[s].hot._selfAccepted});p("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var A,S,B=v.slice();B.length>0;)if(s=B.pop(),d=I[s]){var R={},T=d.hot._disposeHandlers;for(i=0;i<T.length;i++)(n=T[i])(R);for(a[s]=R,d.hot.active=!1,delete I[s],delete g[s],i=0;i<d.children.length;i++){var U=I[d.children[i]];U&&((H=U.parents.indexOf(s))>=0&&U.parents.splice(H,1))}}for(s in g)if(Object.prototype.hasOwnProperty.call(g,s)&&(d=I[s]))for(S=g[s],i=0;i<S.length;i++)A=S[i],(H=d.children.indexOf(A))>=0&&d.children.splice(H,1);for(s in p("apply"),o=y,m)Object.prototype.hasOwnProperty.call(m,s)&&(e[s]=m[s]);var q=null;for(s in g)if(Object.prototype.hasOwnProperty.call(g,s)&&(d=I[s])){S=g[s];var z=[];for(r=0;r<S.length;r++)if(A=S[r],n=d.hot._acceptedDependencies[A]){if(-1!==z.indexOf(n))continue;z.push(n)}for(r=0;r<z.length;r++){n=z[r];try{n(S)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:s,dependencyId:S[r],error:e}),t.ignoreErrored||q||(q=e)}}}for(r=0;r<M.length;r++){var G=M[r];s=G.module,c=[s];try{j(s)}catch(e){if("function"==typeof G.errorHandler)try{G.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:n,originalError:e}),t.ignoreErrored||q||(q=n),q||(q=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:s,error:e}),t.ignoreErrored||q||(q=e)}}return q?(p("fail"),Promise.reject(q)):(p("idle"),new Promise(function(e){e(v)}))}var I={};function j(t){if(I[t])return I[t].exports;var r=I[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:P,apply:_,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(d=c,c=[],d),children:[]};return e[t].call(r.exports,r,r.exports,s(t)),r.l=!0,r.exports}j.m=e,j.c=I,j.d=function(e,t,n){j.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},j.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},j.t=function(e,t){if(1&t&&(e=j(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(j.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)j.d(n,r,function(t){return e[t]}.bind(null,r));return n},j.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return j.d(t,"a",t),t},j.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},j.p="",j.h=function(){return o},s(0)(j.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);onmessage=(e=>{const t=new r.default(e.data).calcPixelatedImageData();postMessage({imageData:t})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=4;t.default=class{constructor({imageData:e,widthPerPixel:t,heightPerPixel:n}){this.imageData=e,this.width=e.width,this.height=e.height,this.initPixelData(t,n)}calcPixelatedImageData(){const{total:e}=this.blockAmount,{size:t}=this.pixelBlock;for(let n=0;n<e;n+=1){const e=[],r=[];for(let o=0;o<t;o+=1){const t=this.getPointByBlockIndex(n,o),i=this.getRGBInPoint(t);0!==i.length&&(e.push(i),r.push(t))}const o=this.computeArrayAverage(e);r.forEach(e=>{this.setRGBInPoint(e,o)})}return this.imageData}initPixelData(e,t){const n=this.validatePixelSize(e),r=this.validatePixelSize(t),o=n*r;this.pixelBlock={width:n,height:r,size:o};const i=Math.ceil(this.width/this.pixelBlock.width),a=Math.ceil(this.height/this.pixelBlock.height),c=i*a;this.blockAmount={x:i,y:a,total:c}}validatePixelSize(e){return e=e<1?1:e,Math.round(e)}getPointByBlockIndex(e,t){const{x:n,y:r}=this.transIndexToCoordinate(e,this.blockAmount.x),{x:o,y:i}=this.transIndexToCoordinate(t,this.pixelBlock.width);return{x:n*this.pixelBlock.width+o,y:r*this.pixelBlock.height+i}}getRGBInPoint(e){if(!this.isPointWithinImageScope(e))return[];const t=this.getImageDataIndexFromPoint(e),{data:n}=this.imageData;return[n[t],n[t+1],n[t+2]]}setRGBInPoint(e,t){if(!this.isPointWithinImageScope(e))return;const n=this.getImageDataIndexFromPoint(e),{data:r}=this.imageData;[r[n],r[n+1],r[n+2]]=t}isPointWithinImageScope({x:e,y:t}){return e<this.width&&t<this.height}getImageDataIndexFromPoint({x:e,y:t}){return(t*this.width+e)*r}transIndexToCoordinate(e,t){return{x:e%t,y:Math.floor(e/t)}}computeArrayAverage(e){return e.reduce((e,t)=>e.map((e,n)=>e+t[n]),[0,0,0]).map(t=>t/e.length)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,