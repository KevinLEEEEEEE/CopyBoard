!function(e){var t=this.webpackHotUpdate;this.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--f&&0===g&&k()}(e,n),t&&t(e,n)};var n,i=!0,s="daff2b43d13e6bb5e137",o=1e4,r={},a=[],c=[];function d(e){var t=B[e];if(!t)return S;var i=function(i){return t.hot.active?(B[i]?-1===B[i].parents.indexOf(e)&&B[i].parents.push(e):(a=[e],n=i),-1===t.children.indexOf(i)&&t.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+e),a=[]),S(i)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return S[e]},set:function(t){S[e]=t}}};for(var o in S)Object.prototype.hasOwnProperty.call(S,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(i,o,s(o));return i.e=function(e){return"ready"===h&&p("prepare"),g++,S.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===h&&(y[e]||P(e),0===g&&0===f&&k())}},i.t=function(e,t){return 1&t&&(e=i(e)),S.t(e,-2&t)},i}var l=[],h="idle";function p(e){h=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var u,m,v,f=0,g=0,y={},b={},w={};function E(e){return+e+""===e?+e:e}function x(e){if("idle"!==h)throw new Error("check() is only allowed in idle status");return i=e,p("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=S.p+""+s+".hot-update.json";i.open("GET",o,!0),i.timeout=e,i.send(null)}catch(e){return n(e)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)t();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(i.responseText)}catch(e){return void n(e)}t(e)}}})}(o).then(function(e){if(!e)return p("idle"),null;b={},y={},w=e.c,v=e.h,p("prepare");var t=new Promise(function(e,t){u={resolve:e,reject:t}});m={};return P(0),"prepare"===h&&0===g&&0===f&&k(),t})}function P(e){w[e]?(b[e]=!0,f++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=S.p+""+e+"."+s+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function k(){p("ready");var e=u;if(u=null,e)if(i)Promise.resolve().then(function(){return C(i)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(E(n));e.resolve(t)}}function C(t){if("ready"!==h)throw new Error("apply() is only allowed in ready status");var n,i,o,c,d;function l(e){for(var t=[e],n={},i=t.slice().map(function(e){return{chain:[e],id:e}});i.length>0;){var s=i.pop(),o=s.id,r=s.chain;if((c=B[o])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:r,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:r,moduleId:o};for(var a=0;a<c.parents.length;a++){var d=c.parents[a],l=B[d];if(l){if(l.hot._declinedDependencies[o])return{type:"declined",chain:r.concat([d]),moduleId:o,parentId:d};-1===t.indexOf(d)&&(l.hot._acceptedDependencies[o]?(n[d]||(n[d]=[]),u(n[d],[o])):(delete n[d],t.push(d),i.push({chain:r.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];-1===e.indexOf(i)&&e.push(i)}}t=t||{};var f={},g=[],y={},b=function(){console.warn("[HMR] unexpected require("+P.moduleId+") to disposed module")};for(var x in m)if(Object.prototype.hasOwnProperty.call(m,x)){var P;d=E(x);var k=!1,C=!1,D=!1,L="";switch((P=m[x]?l(d):{type:"disposed",moduleId:x}).chain&&(L="\nUpdate propagation: "+P.chain.join(" -> ")),P.type){case"self-declined":t.onDeclined&&t.onDeclined(P),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+P.moduleId+L));break;case"declined":t.onDeclined&&t.onDeclined(P),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+P.moduleId+" in "+P.parentId+L));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(P),t.ignoreUnaccepted||(k=new Error("Aborted because "+d+" is not accepted"+L));break;case"accepted":t.onAccepted&&t.onAccepted(P),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(P),D=!0;break;default:throw new Error("Unexception type "+P.type)}if(k)return p("abort"),Promise.reject(k);if(C)for(d in y[d]=m[d],u(g,P.outdatedModules),P.outdatedDependencies)Object.prototype.hasOwnProperty.call(P.outdatedDependencies,d)&&(f[d]||(f[d]=[]),u(f[d],P.outdatedDependencies[d]));D&&(u(g,[P.moduleId]),y[d]=b)}var A,I=[];for(i=0;i<g.length;i++)d=g[i],B[d]&&B[d].hot._selfAccepted&&I.push({module:d,errorHandler:B[d].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var M,O,R=g.slice();R.length>0;)if(d=R.pop(),c=B[d]){var N={},_=c.hot._disposeHandlers;for(o=0;o<_.length;o++)(n=_[o])(N);for(r[d]=N,c.hot.active=!1,delete B[d],delete f[d],o=0;o<c.children.length;o++){var F=B[c.children[o]];F&&((A=F.parents.indexOf(d))>=0&&F.parents.splice(A,1))}}for(d in f)if(Object.prototype.hasOwnProperty.call(f,d)&&(c=B[d]))for(O=f[d],o=0;o<O.length;o++)M=O[o],(A=c.children.indexOf(M))>=0&&c.children.splice(A,1);for(d in p("apply"),s=v,y)Object.prototype.hasOwnProperty.call(y,d)&&(e[d]=y[d]);var T=null;for(d in f)if(Object.prototype.hasOwnProperty.call(f,d)&&(c=B[d])){O=f[d];var j=[];for(i=0;i<O.length;i++)if(M=O[i],n=c.hot._acceptedDependencies[M]){if(-1!==j.indexOf(n))continue;j.push(n)}for(i=0;i<j.length;i++){n=j[i];try{n(O)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:d,dependencyId:O[i],error:e}),t.ignoreErrored||T||(T=e)}}}for(i=0;i<I.length;i++){var H=I[i];d=H.module,a=[d];try{S(d)}catch(e){if("function"==typeof H.errorHandler)try{H.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:n,originalError:e}),t.ignoreErrored||T||(T=n),T||(T=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:d,error:e}),t.ignoreErrored||T||(T=e)}}return T?(p("fail"),Promise.reject(T)):(p("idle"),new Promise(function(e){e(g)}))}var B={};function S(t){if(B[t])return B[t].exports;var i=B[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var i=0;i<e.length;i++)t._acceptedDependencies[e[i]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:x,apply:C,status:function(e){if(!e)return h;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:r[e]};return n=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(i.exports,i,i.exports,d(t)),i.l=!0,i.exports}S.m=e,S.c=B,S.d=function(e,t,n){S.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},S.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},S.t=function(e,t){if(1&t&&(e=S(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(S.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)S.d(n,i,function(t){return e[t]}.bind(null,i));return n},S.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return S.d(t,"a",t),t},S.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},S.p="",S.h=function(){return s},d(17)(S.s=17)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{debug(e,...t){this.emitLogMessage("debug",e,t)}info(e,...t){this.emitLogMessage("info",e,t)}warn(e,...t){this.emitLogMessage("warn",e,t)}error(e,...t){this.emitLogMessage("error",e,t)}emitLogMessage(e,t,n){n.length>0?console[e](t,n):console[e](t)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var s=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(i),o=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(o).concat([s]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},s=0;s<this.length;s++){var o=this[s][0];"number"==typeof o&&(i[o]=!0)}for(s=0;s<e.length;s++){var r=e[s];"number"==typeof r[0]&&i[r[0]]||(n&&!r[2]?r[2]=n:n&&(r[2]="("+r[2]+") and ("+n+")"),t.push(r))}},t}},function(e,t,n){var i={},s=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),o=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var i=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),r=null,a=0,c=[],d=n(24);function l(e,t){for(var n=0;n<e.length;n++){var s=e[n],o=i[s.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](s.parts[r]);for(;r<s.parts.length;r++)o.parts.push(f(s.parts[r],t))}else{var a=[];for(r=0;r<s.parts.length;r++)a.push(f(s.parts[r],t));i[s.id]={id:s.id,refs:1,parts:a}}}}function h(e,t){for(var n=[],i={},s=0;s<e.length;s++){var o=e[s],r=t.base?o[0]+t.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};i[r]?i[r].parts.push(a):n.push(i[r]={id:r,parts:[a]})}return n}function p(e,t){var n=o(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=c[c.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var s=o(e.insertAt.before,n);n.insertBefore(t,s)}}function u(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return n.nc}();i&&(e.attrs.nonce=i)}return v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function f(e,t){var n,i,s,o;if(t.transform&&e.css){if(!(o="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=o}if(t.singleton){var c=a++;n=r||(r=m(t)),i=y.bind(null,n,c,!1),s=y.bind(null,n,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),i=function(e,t,n){var i=n.css,s=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&s;(t.convertToAbsoluteUrls||o)&&(i=d(i));s&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */");var r=new Blob([i],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,n,t),s=function(){u(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),s=function(){u(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else s()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return l(n,t),function(e){for(var s=[],o=0;o<n.length;o++){var r=n[o];(a=i[r.id]).refs--,s.push(a)}e&&l(h(e,t),t);for(o=0;o<s.length;o++){var a;if(0===(a=s[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var g=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function y(e,t,n,i){var s=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=g(t,s);else{var o=document.createTextNode(s),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}},function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createAndAppend=function(e,t="div",...n){const i=document.createElement(t);return null!==n&&n.forEach(e=>{i.classList.add(e)}),null!==e&&e.appendChild(i),i}},function(e,t,n){var i=n(3);(e.exports=n(1)(!1)).push([e.i,".board {\r\n  position: absolute;\r\n  left: 50px;\r\n  top: 0px;\r\n}\r\n\r\n.boardController {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n}\r\n\r\n.boardContent {\r\n  position: relative;\r\n  font-size: 0rem;\r\n}\r\n\r\n.controlPanel {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.controlPanel>div {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n}\r\n\r\n.controlPanel button {\r\n  width: 35px;\r\n  height: 35px;\r\n  padding: 0;\r\n  border: transparent;\r\n  background-color: transparent;\r\n  background-repeat: no-repeat;\r\n  background-position: center;\r\n}\r\n\r\n.leftPanel button {\r\n  background-size: 80%;\r\n}\r\n\r\n.rightPanel button {\r\n  background-size: 65%;\r\n}\r\n\r\n.controlPanel>div button:not(:first-child) {\r\n  visibility: hidden;\r\n}\r\n\r\n.nameInput {\r\n  width: 60px;\r\n  height: 35px;;\r\n  overflow: hidden;\r\n}\r\n\r\n.opacityInput {\r\n  position: absolute;\r\n  width: 35px;\r\n  height: 35px;\r\n  text-align: center;\r\n  -moz-appearance: textfield !important;\r\n}\r\n\r\n.rightPanel>div:hover button {\r\n  visibility: visible;\r\n}\r\n\r\n.rightPanel>div {\r\n  border-radius: 35px;\r\n}\r\n\r\n.boardContent {\r\n  pointer-events: initial;\r\n}\r\n\r\n.tmpTopLayer {\r\n  z-index: 1000 !important;\r\n}\r\n\r\n.tmpTopLayer .boardContent {\r\n  opacity: .9 !important;\r\n}\r\n\r\n.opacity {\r\n  background-image: url("+i(n(19))+");\r\n}\r\n\r\n.opacityZero {\r\n  background-image: url("+i(n(20))+") !important;\r\n}\r\n\r\n.colorPicker {\r\n  background-image: url("+i(n(21))+");\r\n}\r\n\r\n.lock {\r\n  background-image: url("+i(n(22))+");\r\n}\r\n\r\n.unlock {\r\n  background-image: url("+i(n(23))+");\r\n}\r\n\r\n.noPointerEventsForChildren>div {\r\n  pointer-events: none;\r\n}\r\n\r\n.reservePointerEventsForSelf {\r\n  pointer-events: initial !important;\r\n}",""])},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"#colorDialEventsLayer {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n}\r\n\r\n.colorDial {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 30px;\r\n  right: 50px;\r\n  width: 100px;\r\n  height: 100px;\r\n  border-radius: 15px 50px 50px 50px;\r\n  background-color: rgb(60, 60, 60);\r\n  pointer-events: initial;\r\n}\r\n\r\n.colorDial::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 7px;\r\n  left: 7px;\r\n  width: 7px;\r\n  height: 7px;\r\n  border-radius: 3.5px;\r\n  background-color: rgb(150, 150, 150);\r\n  pointer-events: none;\r\n}\r\n\r\n.colorDial>div {\r\n  display: flex;\r\n  flex-direction: row;\r\n  position: relative;\r\n  width: 90px;\r\n  height: 90px;\r\n  border-radius: 45px;\r\n  overflow: hidden;\r\n}\r\n\r\n.colorDial>div::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 2;\r\n  border-radius: 45px;\r\n  box-shadow: 0 0 15px rgba(0, 0, 0, .3) inset;\r\n  pointer-events: none;\r\n}\r\n\r\n.colorContainer {\r\n  position: relative;\r\n  width: 45px;\r\n  height: 90px;\r\n  overflow: hidden;\r\n}\r\n\r\n.colorContainer input {\r\n  position: absolute;\r\n  top: -20px;\r\n  left: -20px;\r\n  width: 200%;\r\n  height: 200%;\r\n  padding: 0;\r\n  border: transparent;\r\n  outline: none;\r\n  background-color: transparent;\r\n}",""])},function(e,t,n){var i=n(3);(e.exports=n(1)(!1)).push([e.i,"#cvsBoardContainer {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  pointer-events: initial;\r\n}\r\n\r\n.canvasBoard .rightPanel>div:not(:first-child):hover {\r\n  background-color: rgba(0, 0, 0, .5);\r\n}\r\n\r\n.setting {\r\n  background-image: url("+i(n(27))+");\r\n}\r\n\r\n.bucket {\r\n  background-image: url("+i(n(28))+");\r\n}\r\n\r\n.pen {\r\n  background-image: url("+i(n(29))+");\r\n}\r\n\r\n.eraser {\r\n  background-image: url("+i(n(30))+");\r\n}\r\n\r\n.move {\r\n  background-image: url("+i(n(31))+");\r\n}\r\n\r\n/* .canvasBoard canvas {\r\n  image-rendering: pixelated;\r\n  image-rendering: -moz-crisp-edges;\r\n  image-rendering: crisp-edges;\r\n} */\r\n\r\n.canvasBoard canvas:first-child {\r\n  background-color: rgba(255, 255, 255, .2);\r\n}\r\n\r\n.canvasBoard canvas:nth-child(2) {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.cursorShortCrossHair {\r\n  cursor: url("+i(n(32))+") 8 8, crosshair;\r\n}",""])},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,".initial {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgb(20 , 20, 20);\r\n  z-index: 300;\r\n}\r\n\r\n.initialPanel {\r\n  width: 280px;\r\n  height: 150px;\r\n  padding: 15px 30px;\r\n  background-color: rgb(40, 40, 40);\r\n  border-radius: 20px;\r\n  box-shadow: 0 1px 5px rgba(0, 0, 0, 0.2);\r\n  color: white;\r\n}\r\n\r\n.initialPanel h3 {\r\n  margin: 0 0 20px 5px;\r\n  font-size: 2rem;\r\n  opacity: .6;\r\n}\r\n\r\n.sizeSetting {\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: .8rem;\r\n}\r\n\r\n.sizeSetting input {\r\n  width: 80px;\r\n  height: 30px;\r\n  margin: 0 20px 0 5px;\r\n  border-radius: 15px;\r\n  background-color: rgb(20, 20, 20);\r\n  text-align: center;\r\n}\r\n\r\n.initialBtnContainer {\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  margin: 20px 0 0 0;\r\n}\r\n\r\n.initialBtnContainer button {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 15px;\r\n  background-color: rgb(20, 20, 20);\r\n  border: transparent;\r\n  outline: none;\r\n  color: white;\r\n  font-size: .6rem;\r\n}",""])},function(e,t,n){(e.exports=n(1)(!1)).push([e.i,"body {\r\n  position: relative;\r\n  padding: 0;\r\n  margin: 0;\r\n  overflow: hidden; \r\n  background-color: rgb(30, 30, 30);\r\n}\r\n\r\n#main {\r\n  position: relative;\r\n  width: 100vw;\r\n  height: 100vh;\r\n}\r\n\r\n.noPointerEvents {\r\n  pointer-events: none !important;\r\n}\r\n\r\n.initialPointerEventsForChildren>div {\r\n  pointer-events: initial !important;\r\n}\r\n\r\n.initialPointerEvents {\r\n  pointer-events: initial !important;\r\n}\r\n\r\n.noDisplay {\r\n  display: none !important; \r\n}\r\n\r\n.cursorCrossHair {\r\n  cursor: crosshair;\r\n}\r\n\r\n.cursorMove {\r\n  cursor: move;\r\n}\r\n\r\n.cursorResize {\r\n  cursor: w-resize;\r\n}\r\n\r\ninput {\r\n  border: transparent;\r\n  outline: transparent;\r\n  background: transparent;\r\n  box-shadow: transparent;\r\n  color: white;\r\n}\r\n\r\ninput::-webkit-outer-spin-button, input::-webkit-inner-spin-button {\r\n  -webkit-appearance: none !important;\r\n}\r\n\r\n.pixelCanvas {\r\n  image-rendering: pixelated;\r\n  image-rendering: -moz-crisp-edges;\r\n  image-rendering: crisp-edges;\r\n}\r\n\r\nbutton {\r\n  outline: none;\r\n}",""])},function(e,t,n){var i=n(3);(e.exports=n(1)(!1)).push([e.i,".output {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 200;\r\n  visibility: hidden;\r\n  background-color: rgba(0, 0, 0, .3);\r\n}\r\n\r\n.outputVisible {\r\n  visibility: visible !important;\r\n}\r\n\r\n.outputPanel {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  width: 1100px;\r\n  height: 750px;\r\n  padding: 50px 90px;\r\n  border-radius: 50px;\r\n  background-color: rgb(245, 245, 245);\r\n}\r\n\r\n.previewBorder {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 480px;\r\n  height: 480px;\r\n  border: 2px rgba(0, 0, 0, .6) dashed;\r\n  border-radius: 20px;\r\n}\r\n\r\n#outputCanvasContainer {\r\n  width: 88%;\r\n  height: 88%;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.outputComponents {\r\n  width: 50%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.outputComponents>div {\r\n  width: calc(100% + 20px);\r\n  height: 90%;\r\n  padding: 1.5rem 3rem;\r\n  box-sizing: border-box;\r\n  overflow-x: hidden; \r\n  overflow-y: scroll;\r\n}\r\n\r\n.opacityBlack {\r\n  background-image: url("+i(n(36))+");\r\n  background-size: 80% !important;\r\n}\r\n\r\n.opacityBlackZero {\r\n  background-image: url("+i(n(37))+") !important;\r\n  background-size: 80% !important;\r\n}\r\n\r\n.deleteBlack {\r\n  background-image: url("+i(n(38))+");\r\n}\r\n\r\n.componentBtnContainer {\r\n  text-align: center;\r\n  padding: 25px;\r\n}\r\n\r\n.componentBtnContainer button {\r\n  width: 45px;\r\n  height: 45px;\r\n  margin: 0 10px;\r\n  border: 1px black solid;\r\n  border-radius: 25px;\r\n  background-repeat: no-repeat !important;\r\n  background-position: center !important;\r\n  background-size: 55% !important;\r\n}\r\n\r\n.componentBtnContainer button:hover {\r\n  background-size: 60% !important;\r\n}\r\n\r\n.lightnessBtn {\r\n  background: url("+i(n(39))+");\r\n}\r\n\r\n.contrastBtn {\r\n  background: url("+i(n(40))+");\r\n}\r\n\r\n.saturationBtn {\r\n  background: url("+i(n(41))+");\r\n}\r\n\r\n.curveBtn {\r\n  background: url("+i(n(42))+");\r\n}\r\n\r\n.downloadBtn {\r\n  background: url("+i(n(43))+");\r\n}\r\n\r\n.outputBtnContainer {\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  padding: 0;\r\n}\r\n\r\n.outputBtn {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100px;\r\n  height: 40px;\r\n  margin-left: 10px;\r\n  border: transparent;\r\n  border-radius: 40px;\r\n  outline: none;\r\n  text-decoration: none;\r\n  font-size: .8rem;\r\n}\r\n\r\n#cancel {\r\n  background-color: rgb(207, 142, 142);\r\n}\r\n\r\n#download {\r\n  background-color: rgb(161, 228, 202);\r\n  color: black;\r\n}",""])},function(e,t,n){var i=n(3);(e.exports=n(1)(!1)).push([e.i,"#refBoardContainer {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  pointer-events: initial;\r\n}\r\n\r\n.referenceBoard .rightPanel>div:hover {\r\n  background-color: rgba(0, 0, 0, .5);\r\n}\r\n\r\n.pixelateInput {\r\n  position: absolute;\r\n  width: 35px;\r\n  height: 35px;\r\n  border: transparent;\r\n  outline: transparent;\r\n  background: transparent;\r\n  box-shadow: transparent;\r\n  text-align: center;\r\n  color: white;\r\n  -moz-appearance: textfield !important;\r\n}\r\n\r\n.pixelateInput {\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n.moveUp {\r\n  background-image: url("+i(n(45))+");\r\n}\r\n\r\n.moveTop {\r\n  background-image: url("+i(n(46))+");\r\n}\r\n\r\n.moveDown {\r\n  background-image: url("+i(n(47))+");\r\n}\r\n\r\n.moveBottom {\r\n  background-image: url("+i(n(48))+");\r\n}\r\n\r\n.pixelate {\r\n  background-image: url("+i(n(49))+");\r\n}\r\n\r\n.delete {\r\n  background-image: url("+i(n(50))+");\r\n}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13);t.Hex=class extends i.default{constructor(e){super(),this.hex=this.validate(e)}getRGB(){return this.hexToRgb(this.hex)}getHex(){return this.hex}validate({hex:e}){return!0===/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)?{hex:e}:{hex:"#000000"}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{rgbToHex({r:e,g:t,b:n}){return{hex:"#"+this.componentToHex(e)+this.componentToHex(t)+this.componentToHex(n)}}hexToRgb({hex:e}){const t=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(e,t,n)=>e+e+t+t+n+n),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return this.getRGBFromSplittedHex(n)}getRGBFromSplittedHex(e){return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:{r:0,g:0,b:0}}componentToHex(e){const t=e.toString(16);return 1===t.length?"0"+t:t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(13);t.RGB=class extends i.default{constructor(e){super(),this.rgb=this.validate(e)}getRGB(){return this.rgb}getHex(){return this.rgbToHex(this.rgb)}validate({r:e,g:t,b:n}){return{r:this.singleParamValidater(e),g:this.singleParamValidater(t),b:this.singleParamValidater(n)}}singleParamValidater(e){return e>255?255:e<0?0:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e){this.width=0,this.height=0,this.cssWidth=0,this.cssHeight=0,this.name=e,this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d")}getName(){return this.name}getWidth(){return this.width}getHeight(){return this.height}getStyleWidth(){return this.cssWidth}getStyleHeight(){return this.cssHeight}getImageData(){return this.ctx.getImageData(0,0,this.width,this.height)}getColorAt(e,t){const n=this.cssWidth/this.width,i=Math.round(e/n),s=4*(Math.round(t/n)*this.width+i),o=this.getImageData(),{data:r}=o;return[r[s],r[s+1],r[s+2],r[s+3]]}activePixelBoard(){this.canvas.classList.add("pixelCanvas")}shutDownPixelBoard(){this.canvas.classList.remove("pixelCanvas")}setName(e){this.name=e}setWidth(e){this.width=e,this.canvas.width=e}setHeight(e){this.height=e,this.canvas.height=e}setStyleWidth(e){this.cssWidth=e,window.requestAnimationFrame(()=>{this.canvas.style.width=e+"px"})}setStyleHeight(e){this.cssHeight=e,window.requestAnimationFrame(()=>{this.canvas.style.height=e+"px"})}setFillColor(e){this.ctx.fillStyle=e}setCanvasParentNode(e){e.appendChild(this.canvas)}drawImage(e,t,n,i,s){this.ctx.drawImage(e,t,n,i,s)}drawImageData(e){this.ctx.putImageData(e,0,0)}fillContentRect(e,t,n,i){this.ctx.fillRect(e,t,n,i)}clearContentRect(e,t,n,i){this.ctx.clearRect(e,t,n,i)}clearContentLayer(){this.ctx.clearRect(0,0,this.width,this.height)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class extends HTMLElement{constructor(){super(),this.targets=new Set}addTarget(e){this.targets.add(e)}removeTarget(e){this.targets.delete(e)}hasTarget(e){return this.targets.has(e)}dispatchCustomEvent(e,t){const n=new CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0,composed:!0});this.dispatedEventOnTargets(n)}dispatedEventOnTargets(e){this.targets.forEach(t=>{t.dispatchEvent(e)})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(18),n(25),n(26),n(33),n(34),n(35),n(44),new(n(51).default)},function(e,t,n){var i=n(5);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0},o=n(2)(i,s);i.locals&&(e.exports=i.locals),e.hot.accept(5,function(){var t=n(5);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){e.exports=n.p+"assets/img/display-e91937.png"},function(e,t,n){e.exports=n.p+"assets/img/noDisplay-46d1b7.png"},function(e,t,n){e.exports=n.p+"assets/img/colorPicker-6aa1f4.png"},function(e,t,n){e.exports=n.p+"assets/img/lock-d3d37d.png"},function(e,t,n){e.exports=n.p+"assets/img/unlock-6701f8.png"},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var s,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(s=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:i+o.replace(/^\.\//,""),"url("+JSON.stringify(s)+")")})}},function(e,t,n){var i=n(6);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0},o=n(2)(i,s);i.locals&&(e.exports=i.locals),e.hot.accept(6,function(){var t=n(6);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){var i=n(7);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0},o=n(2)(i,s);i.locals&&(e.exports=i.locals),e.hot.accept(7,function(){var t=n(7);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){e.exports=n.p+"assets/img/save-cbd26b.png"},function(e,t,n){e.exports=n.p+"assets/img/bucket-44ccb5.png"},function(e,t,n){e.exports=n.p+"assets/img/pen-d1e2ab.png"},function(e,t,n){e.exports=n.p+"assets/img/eraser-7e942e.png"},function(e,t,n){e.exports=n.p+"assets/img/move-6f7a52.png"},function(e,t,n){e.exports=n.p+"assets/img/shartCrossHair-59221a.ico"},function(e,t,n){var i=n(8);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0},o=n(2)(i,s);i.locals&&(e.exports=i.locals),e.hot.accept(8,function(){var t=n(8);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){var i=n(9);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0},o=n(2)(i,s);i.locals&&(e.exports=i.locals),e.hot.accept(9,function(){var t=n(9);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){var i=n(10);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0},o=n(2)(i,s);i.locals&&(e.exports=i.locals),e.hot.accept(10,function(){var t=n(10);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){e.exports=n.p+"assets/img/displayBlack-92552d.png"},function(e,t,n){e.exports=n.p+"assets/img/noDisplayBlack-536908.png"},function(e,t,n){e.exports=n.p+"assets/img/deleteBlack-627aa6.png"},function(e,t,n){e.exports=n.p+"assets/img/lightness-fc39e0.png"},function(e,t,n){e.exports=n.p+"assets/img/contrast-53b558.png"},function(e,t,n){e.exports=n.p+"assets/img/saturation-cffb6b.png"},function(e,t,n){e.exports=n.p+"assets/img/curve-cdc7c0.png"},function(e,t,n){e.exports=n.p+"assets/img/download-719293.png"},function(e,t,n){var i=n(11);"string"==typeof i&&(i=[[e.i,i,""]]);var s={hmr:!0,transform:void 0,insertInto:void 0},o=n(2)(i,s);i.locals&&(e.exports=i.locals),e.hot.accept(11,function(){var t=n(11);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,i=0;for(n in e){if(!t||e[n]!==t[n])return!1;i++}for(n in t)i--;return 0===i}(i.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");o(t)}),e.hot.dispose(function(){o()})},function(e,t,n){e.exports=n.p+"assets/img/moveup-92d7db.png"},function(e,t,n){e.exports=n.p+"assets/img/movetop-1755a9.png"},function(e,t,n){e.exports=n.p+"assets/img/movedown-a12a9b.png"},function(e,t,n){e.exports=n.p+"assets/img/movebottom-152418.png"},function(e,t,n){e.exports=n.p+"assets/img/pixelate-90e960.png"},function(e,t,n){e.exports=n.p+"assets/img/delete-5e3b57.png"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(52),s=n(55),o=n(60),r=n(61),a=n(69),c=n(73);t.default=class{constructor(){this.initApp=((e,t)=>{const n=document.getElementById("cvsBoardContainer");this.canvasBoard=new s.default("canvas",n,this.colorDial,this.outputPanel,e,t),this.initComponents()}),this.handleFile=((e,t)=>{this.addReferencrBoard(e,t)});const e=document.getElementById("colorDialEventsLayer"),t=document.getElementById("main"),n=document.getElementById("pipeline");this.colorDial=new i.ColorDial(e),this.fileInput=new o.default(t),this.outputPanel=new r.OutputPanel(n),c.initCustomElements(),this.attachInitialPanel()}initComponents(){this.colorDial.init(),this.colorDial.attach(this.canvasBoard),this.fileInput.init(),this.fileInput.registerEvents(this.handleFile),this.canvasBoard.init(),this.outputPanel.init()}addReferencrBoard(e,t){const n=document.getElementById("refBoardContainer");new a.default(t,n,this.colorDial).init(e)}attachInitialPanel(){const e=document.querySelector(".initial"),t=document.getElementById("initApp"),n=document.getElementById("canvasWidth"),i=document.getElementById("canvasHeight");t.addEventListener("click",()=>{this.initApp(this.getValidNumber(n.value),this.getValidNumber(i.value)),e.classList.add("noDisplay")},!1)}getValidNumber(e){const t=parseInt(e,10);return!1===isNaN(t)?t:32}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(12),s=n(53),o=n(0),r=n(54);t.ColorDial=class extends s.default{constructor(e){super(),this.currentColor=new i.Hex({hex:"#000000"}),this.windowSize=window,this.state=0,this.mousedown=(e=>{const{target:t,offsetX:n,offsetY:i}=e;this.canAcceptMousedown(t)&&(this.state=1,this.updateDetectLayer(),this.updateMousePosition(n,i))}),this.mousemove=(e=>{const{buttons:t,pageX:n,pageY:i}=e;if(!this.canAcceptMouseMove())return;if(!this.canContinueMouseMove(t))return void this.mouseup();const s=this.getMovedNodePosition(n,i);this.updateColorDialNodePosition(s)}),this.mouseup=(()=>{this.state=0,this.moveColorDialWithinClientScope(),this.updateDetectLayer()}),this.colorInputChange=(e=>{const{value:t}=e.target,n=new i.Hex({hex:t});this.changeCurrentColor(n),this.logger.info("color change from colorDial input change")}),this.windowResize=(()=>{this.windowSize=window,this.moveColorDialWithinClientScope()}),this.preventAndStop=(e=>{e.preventDefault(),e.stopPropagation()}),this.dialDomsPackage=r.colorDialTemplate(),this.parentNode=e,this.logger=new o.default}init(){this.attachMoveEvents(),this.attachInputEvents(),this.attachUtilsEvents(),this.appendSelfToParentNode()}delete(){this.removeMoveEvents(),this.removeInputEvents(),this.removeUtilsEvents(),this.removeSelfFromParentNode()}changeColor(e){this.logger.info("color change from other panel"),this.changeCurrentColor(e)}getRGB(){return this.currentColor.getRGB()}getHex(){return this.currentColor.getHex()}appendSelfToParentNode(){this.parentNode.appendChild(this.dialDomsPackage.colorDial)}removeSelfFromParentNode(){this.parentNode.removeChild(this.dialDomsPackage.colorDial)}attachMoveEvents(){const{colorDial:e}=this.dialDomsPackage;e.addEventListener("mousedown",this.mousedown,!0),e.addEventListener("mousemove",this.mousemove,!0),e.addEventListener("mouseup",this.mouseup,!0),this.parentNode.addEventListener("mousemove",this.mousemove,!0),this.parentNode.addEventListener("mouseup",this.mouseup,!0)}removeMoveEvents(){const{colorDial:e}=this.dialDomsPackage;e.removeEventListener("mousedown",this.mousedown,!0),e.removeEventListener("mousemove",this.mousemove,!0),e.removeEventListener("mouseup",this.mouseup,!0),this.parentNode.removeEventListener("mousemove",this.mousemove,!0),this.parentNode.removeEventListener("mouseup",this.mouseup,!0)}canAcceptMousedown(e){return e.isSameNode(this.dialDomsPackage.colorDial)&&0===this.state}canAcceptMouseMove(){return 1===this.state}canContinueMouseMove(e){return 1===e}updateDetectLayer(){switch(this.state){case 0:this.parentNode.classList.add("noPointerEvents");break;case 1:this.parentNode.classList.remove("noPointerEvents")}}updateMousePosition(e,t){this.mouseOffsetPosition={offsetX:e,offsetY:t}}getMovedNodePosition(e,t){return{x:e-this.mouseOffsetPosition.offsetX,y:t-this.mouseOffsetPosition.offsetY}}moveColorDialWithinClientScope(){const{colorDial:e}=this.dialDomsPackage,{offsetLeft:t,offsetTop:n,offsetWidth:i,offsetHeight:s}=e,{innerWidth:o,innerHeight:r}=this.windowSize,a={x:t,y:n};t<0?a.x=0:t+i>o&&(a.x=o-i),n<0?a.y=0:n+s>r&&(a.y=r-s),o<=i&&(a.x=0),o<=s&&(a.y=0),this.updateColorDialNodePosition(a)}updateColorDialNodePosition({x:e,y:t}){const{colorDial:n}=this.dialDomsPackage;window.requestAnimationFrame(()=>{n.style.left=e+"px",n.style.top=t+"px"})}attachInputEvents(){const{colorInputL:e,colorInputR:t}=this.dialDomsPackage;e.addEventListener("change",this.colorInputChange,!0),t.addEventListener("change",this.colorInputChange,!0)}removeInputEvents(){const{colorInputL:e,colorInputR:t}=this.dialDomsPackage;e.removeEventListener("change",this.colorInputChange,!0),t.removeEventListener("change",this.colorInputChange,!0)}changeCurrentColor(e){this.currentColor=e,this.updateInputDisplay(),this.notifyObservers()}updateInputDisplay(){const{colorInputL:e,colorInputR:t}=this.dialDomsPackage,{hex:n}=this.currentColor.getHex();e.value=n,t.value=n}attachUtilsEvents(){const{colorDial:e}=this.dialDomsPackage;window.addEventListener("resize",this.windowResize,!0),e.addEventListener("drop",this.preventAndStop,!0),e.addEventListener("dragover",this.preventAndStop,!0),e.addEventListener("contextmenu",this.preventAndStop,!0)}removeUtilsEvents(){const{colorDial:e}=this.dialDomsPackage;window.removeEventListener("resize",this.windowResize,!0),e.removeEventListener("drop",this.preventAndStop,!0),e.removeEventListener("dragover",this.preventAndStop,!0),e.removeEventListener("contextmenu",this.preventAndStop,!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(){this.IObservers=new Set}attach(e){this.IObservers.add(e)}detach(e){this.IObservers.delete(e)}has(e){return this.IObservers.has(e)}notifyObservers(){this.IObservers.forEach(e=>{e.update()})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4);t.colorDialTemplate=(()=>{const e=i.createAndAppend(null,"div","colorDial"),t=i.createAndAppend(e,"div"),n=i.createAndAppend(t,"div","colorContainer"),s=i.createAndAppend(t,"div","colorContainer"),o=i.createAndAppend(n,"input"),r=i.createAndAppend(s,"input");return o.setAttribute("type","color"),r.setAttribute("type","color"),{colorDial:e,colorInputL:o,colorInputR:r}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(14),s=n(0),o=n(56),r=n(59),a=.05,c=70,d=300,l=.6;t.default=class extends o.ShadowBoard{constructor(e,t,n,o,a,c){super(e,a,c,10),this.windowSize=window,this.isOpacityFocused=!1,this.isPaintStarted=!1,this.isLocked=!1,this.updateCursorStyle=((e,t)=>{this.toggleCursorStyle(e),this.toggleCursorStyle(t)}),this.mousedown=(e=>{const{target:t,offsetX:n,offsetY:i,ctrlKey:s}=e;this.canAcceptMousedown(t)&&(this.updateMouseState(s),this.updateTmpScaleRatio(),this.updateMousePosition(n,i))}),this.mousemove=(e=>{const{pageX:t,pageY:n,offsetX:i,buttons:s}=e;if(this.canAcceptMouseMove())if(this.canContinueMouseMove(s))switch(this.state){case 1:this.mousemoveForMove(t,n);break;case 2:this.mousemoveForScale(i)}else this.mouseup()}),this.mouseup=(()=>{1!==this.state&&2!==this.state||(this.state=0,this.moveRefBoardlWithinClientScope())}),this.colorPicker=(()=>{this.state=6}),this.pickColor=(e=>{const{buttons:t,offsetX:n,offsetY:s}=e;if(6===this.state){if(2!==t){const[e,t,o]=this.getColorAt(n,s),r=new i.RGB({r:e,g:t,b:o});this.colorDial.changeColor(r)}this.state=0}}),this.moveBtn=(()=>{this.state=0}),this.setting=(()=>{const e=this.getImageData();this.outputPanel.updateOutputImage(e,this.getName())}),this.locker=(()=>{this.isLocked=!this.isLocked,this.updateLockerIcon()}),this.nameChange=(e=>{const{value:t}=e.target;this.setName(t)}),this.opacity=(()=>{this.updateOpacityInputAndBtn(),this.focusAndSelectOpacityInput(),this.isOpacityFocused=!0}),this.opacityBlur=(e=>{if(!0===this.isOpacityFocused)try{this.opacityChange(e)}catch(e){this.updateOpacityInputAndBtn(),this.isOpacityFocused=!1,this.logger.error(e)}}),this.opacityChange=(e=>{const{value:t}=e.target,n=parseInt(t,10);if("number"!=typeof n)throw new Error("please enter number");if(n>100||n<0)throw new Error("out of the range of opacity");this.changeOpacityOfContent(n),this.changeOpacityOfIcon(n),this.updateOpacityInputAndBtn(),this.isOpacityFocused=!1}),this.pen=(()=>{this.state=3}),this.eraser=(()=>{this.state=4}),this.bucket=(()=>{this.state=5}),this.paintBegin=(e=>{const{layerX:t,layerY:n}=e;switch(this.state){case 3:case 4:this.isPaintStarted=!0,this.painting(e);break;case 5:this.bucketPaint(t,n);break;case 1:case 2:case 6:default:this.isPaintStarted=!1}}),this.painting=(e=>{if(!1===this.isPaintStarted)return;const{layerX:t,layerY:n}=e;switch(this.state){case 3:this.penPaint(t,n);break;case 4:this.eraserPaint(t,n)}}),this.paintEnd=(()=>{this.isPaintStarted=!1}),this.windowResize=(()=>{this.windowSize=window,this.moveRefBoardlWithinClientScope()}),this.preventAndStop=(e=>{e.preventDefault(),e.stopPropagation()}),this.colorDial=n,this.outputPanel=o,this.parentNode=t,this.cvsDomsPackage=r.canvasTemplate(),this.initStateMachine(),this.logger=new s.default}init(){this.attachMoveEvents(),this.attachPaintEvents(),this.attachToolsEvents(),this.attachSettingBtnEvents(),this.attachUtilsEvents(),this.activePixelBoard(),this.setCanvasParentNode(this.cvsDomsPackage.cvsContainer),this.appendSelfToParentNode()}delete(){this.removeMoveEvents(),this.removePaintEvents(),this.removeToolsEvents(),this.removeSettingBtnEvents(),this.removeUtilsEvents(),this.removeSelfFromParentNode()}setFillColor(e){super.setFillColor(e)}update(){const{hex:e}=this.colorDial.getHex();this.setFillColor(e)}appendSelfToParentNode(){this.parentNode.appendChild(this.cvsDomsPackage.canvasBoard)}removeSelfFromParentNode(){this.parentNode.removeChild(this.cvsDomsPackage.canvasBoard)}initStateMachine(){const e=this;Reflect.defineProperty(this,"state",{get(){return this._state},set(t){e.updateCursorStyle(this._state,t),this._state=t,e.updateShadowBoardState(),e.updateCvsBoardNodeZIndex(),e.updateDetectLayer()}}),this.state=0}toggleCursorStyle(e){const{cvsContainer:t}=this.cvsDomsPackage;switch(e){case 1:t.classList.toggle("cursorMove");break;case 2:t.classList.toggle("cursorResize");break;case 6:t.classList.toggle("cursorCrossHair");break;case 3:case 4:case 5:t.classList.toggle("cursorShortCrossHair")}}updateShadowBoardState(){switch(this.state){case 3:case 5:this.restartShadowMode(),this.changeShadowMode(0);break;case 4:this.restartShadowMode(),this.changeShadowMode(1);break;case 0:default:this.pauseShadowMode()}}updateCvsBoardNodeZIndex(){const{canvasBoard:e}=this.cvsDomsPackage;switch(this.state){case 0:case 6:case 3:case 4:case 5:e.classList.remove("tmpTopLayer");break;case 1:case 2:e.classList.add("tmpTopLayer")}}updateDetectLayer(){const{canvasBoard:e}=this.cvsDomsPackage,t=this.parentNode;switch(this.state){case 0:case 6:t.classList.add("noPointerEvents"),t.classList.add("initialPointerEventsForChildren"),e.classList.remove("initialPointerEvents");break;case 1:case 2:t.classList.remove("noPointerEvents"),t.classList.remove("initialPointerEventsForChildren"),e.classList.add("initialPointerEvents")}}attachMoveEvents(){const{canvasBoard:e}=this.cvsDomsPackage;e.addEventListener("mousedown",this.mousedown,!0),e.addEventListener("mousemove",this.mousemove,!0),e.addEventListener("mouseup",this.mouseup,!0),this.parentNode.addEventListener("mousemove",this.mousemove,!0),this.parentNode.addEventListener("mouseup",this.mousemove,!0)}removeMoveEvents(){const{canvasBoard:e}=this.cvsDomsPackage;e.removeEventListener("mousedown",this.mousedown,!0),e.removeEventListener("mousemove",this.mousemove,!0),e.removeEventListener("mouseup",this.mouseup,!0),this.parentNode.removeEventListener("mousemove",this.mousemove,!0),this.parentNode.removeEventListener("mouseup",this.mousemove,!0)}updateMouseState(e){this.state=!0===e?2:1}canAcceptMousedown(e){return this.cvsDomsPackage.cvsContainer.contains(e)&&0===this.state&&!1===this.isLocked}canAcceptMouseMove(){return 1===this.state||2===this.state}canContinueMouseMove(e){return 1===e}updateMousePosition(e,t){this.mouseOffsetPosition={offsetX:e,offsetY:t}}updateTmpScaleRatio(){this.tmpScaleRatio=this.getStyleWidth()/this.getWidth()}mousemoveForMove(e,t){const n=e-this.mouseOffsetPosition.offsetX,i=t-this.mouseOffsetPosition.offsetY-c;this.updateCvsBoardNodePosition(n,i)}updateCvsBoardNodePosition(e,t){const{canvasBoard:n}=this.cvsDomsPackage;window.requestAnimationFrame(()=>{n.style.left=e+"px",n.style.top=t+"px"})}mousemoveForScale(e){const t=e-this.mouseOffsetPosition.offsetX,n=this.getScaleRatioFromMoveDistance(t),i=this.tmpScaleRatio+n,s=this.getWidth()*i,o=this.getHeight()*i;s>d&&(this.setStyleWidth(s),this.setStyleHeight(o))}getScaleRatioFromMoveDistance(e){return Math.floor(e*a)}moveRefBoardlWithinClientScope(){const{canvasBoard:e}=this.cvsDomsPackage,{offsetLeft:t,offsetTop:n,offsetWidth:i,offsetHeight:s}=e,{innerWidth:o,innerHeight:r}=this.windowSize,a={x:t,y:n};t+20>=o?a.x=o-20:t+i<=20&&(a.x=20-i),n+20+c>=r?a.y=r-20-c:n+s<=20&&(a.y=20-s),this.updateCvsBoardNodePosition(a.x,a.y)}attachToolsEvents(){const{colorPickerBtn:e,cvsContainer:t}=this.cvsDomsPackage;e.addEventListener("click",this.colorPicker,!0),t.addEventListener("click",this.pickColor,!0),t.addEventListener("contextmenu",this.contextmenu,!0)}removeToolsEvents(){const{colorPickerBtn:e,cvsContainer:t}=this.cvsDomsPackage;e.removeEventListener("click",this.colorPicker,!0),t.removeEventListener("click",this.pickColor,!0),t.removeEventListener("contextmenu",this.contextmenu,!0)}contextmenu(e){e.preventDefault(),e.stopPropagation()}attachSettingBtnEvents(){const{moveBtn:e,settingBtn:t,lockerBtn:n,nameInput:i,opacityBtn:s,opacityInput:o}=this.cvsDomsPackage;e.addEventListener("click",this.moveBtn,!0),t.addEventListener("click",this.setting,!0),n.addEventListener("click",this.locker,!0),i.addEventListener("change",this.nameChange,!0),s.addEventListener("click",this.opacity,!0),o.addEventListener("blur",this.opacityBlur,!0),o.addEventListener("change",this.opacityChange,!0)}removeSettingBtnEvents(){const{moveBtn:e,settingBtn:t,lockerBtn:n,nameInput:i,opacityBtn:s,opacityInput:o}=this.cvsDomsPackage;e.removeEventListener("click",this.moveBtn,!0),t.removeEventListener("click",this.setting,!0),n.removeEventListener("click",this.locker,!0),i.removeEventListener("change",this.nameChange,!0),s.removeEventListener("click",this.opacity,!0),o.removeEventListener("blur",this.opacityBlur,!0),o.removeEventListener("change",this.opacityChange,!0)}updateLockerIcon(){const{lockerBtn:e}=this.cvsDomsPackage;e.classList.toggle("unlock"),e.classList.toggle("lock")}changeOpacityOfContent(e){const{cvsContainer:t}=this.cvsDomsPackage,n=e/100;window.requestAnimationFrame(()=>{t.style.opacity=n.toString()})}changeOpacityOfIcon(e){const{opacityBtn:t}=this.cvsDomsPackage,n=(100-(100-e)*l)/100;0===e?t.classList.add("opacityZero"):t.classList.remove("opacityZero"),window.requestAnimationFrame(()=>{t.style.opacity=n.toString()})}updateOpacityInputAndBtn(){const{opacityBtn:e,opacityInput:t}=this.cvsDomsPackage;t.classList.toggle("noDisplay"),e.classList.toggle("noDisplay")}focusAndSelectOpacityInput(){const{opacityInput:e}=this.cvsDomsPackage;e.focus(),e.select()}attachPaintEvents(){const{penBtn:e,eraserBtn:t,bucketBtn:n,cvsContainer:i}=this.cvsDomsPackage;e.addEventListener("click",this.pen,!0),t.addEventListener("click",this.eraser,!0),n.addEventListener("click",this.bucket,!0),i.addEventListener("mousedown",this.paintBegin),i.addEventListener("mousemove",this.painting,!0),i.addEventListener("mouseup",this.paintEnd,!0),i.addEventListener("mouseleave",this.paintEnd,!0)}removePaintEvents(){const{penBtn:e,eraserBtn:t,bucketBtn:n,cvsContainer:i}=this.cvsDomsPackage;e.removeEventListener("click",this.pen,!0),t.removeEventListener("click",this.eraser,!0),n.removeEventListener("click",this.bucket,!0),i.removeEventListener("mousedown",this.paintBegin),i.removeEventListener("mousemove",this.painting,!0),i.removeEventListener("mouseup",this.paintEnd,!0),i.removeEventListener("mouseleave",this.paintEnd,!0)}penPaint(e,t){this.fillContentRect(e,t)}eraserPaint(e,t){this.clearContentRect(e,t)}bucketPaint(e,t){this.fillContentBucket(e,t)}attachUtilsEvents(){const{canvasBoard:e}=this.cvsDomsPackage;window.addEventListener("resize",this.windowResize,!0),e.addEventListener("drop",this.preventAndStop,!0),e.addEventListener("dragover",this.preventAndStop,!0),e.addEventListener("contextmenu",this.preventAndStop,!0)}removeUtilsEvents(){const{canvasBoard:e}=this.cvsDomsPackage;window.removeEventListener("resize",this.windowResize,!0),e.removeEventListener("drop",this.preventAndStop,!0),e.removeEventListener("dragover",this.preventAndStop,!0),e.removeEventListener("contextmenu",this.preventAndStop,!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(12),s=n(57),o=n(15),r=n(58);t.ShadowBoard=class extends o.default{constructor(e,t,n,s){super(e),this.shadowMode=0,this.isShadowModeActive=!1,this.currentFillStyle=new i.Hex({hex:"#000000"}),this.currentMousePos=[-1,-1],this.shadowMove=(e=>{const{layerX:t,layerY:n}=e;!0===this.isShadowModeActive&&this.paintShadowBlock(t,n)}),this.shadowLeave=(()=>{this.clearShadowLayer()}),this.shadowDomsPackage=r.shadowTemplate(),this.shadowContext=this.shadowDomsPackage.shadowBoard.getContext("2d"),this.initCanvasSize(t,n,s),this.initShadowCanvasStyle(),this.attachShadowEvents()}setCanvasParentNode(e){super.setCanvasParentNode(e),e.appendChild(this.shadowDomsPackage.shadowBoard)}fillContentRect(e,t){const[n,i]=this.getXYFromLayerXY(e,t);super.fillContentRect(n,i,1,1)}fillContentBucket(e,t){const[n,i]=this.getXYFromLayerXY(e,t),o=this.currentFillStyle.getRGB(),r=this.getImageData(),a=new s.default(r).getFloodFilledImageData({x:n,y:i},o);this.drawImageData(a)}clearContentRect(e,t){const[n,i]=this.getXYFromLayerXY(e,t);super.clearContentRect(n,i,1,1)}setFillColor(e){this.shadowContext.fillStyle=e,this.currentFillStyle=new i.Hex({hex:e}),super.setFillColor(e)}setStyleHeight(e){this.shadowDomsPackage.shadowBoard.height=e,super.setStyleHeight(e),this.updateCurrentScaleRatio()}setStyleWidth(e){this.shadowDomsPackage.shadowBoard.width=e,super.setStyleWidth(e),this.updateCurrentScaleRatio()}pauseShadowMode(){this.isShadowModeActive=!1}restartShadowMode(){this.isShadowModeActive=!0}changeShadowMode(e){this.shadowMode=e}initShadowCanvasStyle(){this.shadowContext.strokeStyle="white"}initCanvasSize(e,t,n){super.setWidth(e),super.setHeight(t),this.setStyleWidth(e*n),this.setStyleHeight(t*n)}updateCurrentScaleRatio(){this.currentScaleRatio=this.getStyleWidth()/this.getWidth()}getScaledXYFromLayerXY(e,t){const n=this.currentScaleRatio;return[Math.floor(e/n)*n,Math.floor(t/n)*n]}getXYFromLayerXY(e,t){const n=this.currentScaleRatio;return[Math.floor(e/n),Math.floor(t/n)]}attachShadowEvents(){const{shadowBoard:e}=this.shadowDomsPackage;e.addEventListener("mousemove",this.shadowMove,!0),e.addEventListener("mouseleave",this.shadowLeave,!0)}paintShadowBlock(e,t){const[n,i]=this.getScaledXYFromLayerXY(e,t);n===this.currentMousePos[0]&&i===this.currentMousePos[1]||this.drawShadowPixel(n,i)}drawShadowPixel(e,t){switch(this.clearShadowLayer(),this.shadowMode){case 0:this.fillShadowRect(e,t);break;case 1:this.fillShadowStroke(e,t)}}fillShadowRect(e,t){this.shadowContext.fillRect(e,t,this.currentScaleRatio,this.currentScaleRatio)}fillShadowStroke(e,t){const n=this.shadowContext;n.beginPath(),n.rect(e,t,this.currentScaleRatio,this.currentScaleRatio),n.closePath(),n.stroke()}clearShadowLayer(){const e=this.getStyleWidth(),t=this.getStyleHeight();this.shadowContext.clearRect(0,0,e,t)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=4;t.default=class{constructor(e){this.imageData=e,this.width=e.width,this.height=e.height}getFloodFilledImageData(e,t){return this.replacedColor=this.getRGBAInPoint(e),this.filledColor=t,this.calcFloodFilledImageData(e)}calcFloodFilledImageData(e){return this.floodFill4(e),this.imageData}floodFill4(e){if(!this.isPointWithinImageScope(e))return;const t=this.getRGBAInPoint(e);this.isEqualRGBA(t,this.replacedColor)&&(this.isEqualRGB(t,this.filledColor)||(this.setRGBInPoint(e,this.filledColor),this.floodFill4({x:e.x+1,y:e.y}),this.floodFill4({x:e.x-1,y:e.y}),this.floodFill4({x:e.x,y:e.y+1}),this.floodFill4({x:e.x,y:e.y-1})))}getRGBAInPoint(e){const t=this.getImageDataIndexFromPoint(e),{data:n}=this.imageData;return{r:n[t],g:n[t+1],b:n[t+2],a:n[t+3]}}setRGBInPoint(e,t){const n=this.getImageDataIndexFromPoint(e),{data:i}=this.imageData;i[n]=t.r,i[n+1]=t.g,i[n+2]=t.b,i[n+3]=255}isPointWithinImageScope({x:e,y:t}){return e<this.width&&t<this.height}isEqualRGB(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&255===e.a}isEqualRGBA(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}getImageDataIndexFromPoint({x:e,y:t}){return(t*this.width+e)*i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4);t.shadowTemplate=(()=>{return{shadowBoard:i.createAndAppend(null,"canvas")}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4);t.canvasTemplate=(()=>{const e=i.createAndAppend(null,"div","board","canvasBoard","nonePointerEvents"),t=i.createAndAppend(e,"div","boardController"),n=i.createAndAppend(e,"div","boardContent"),s=i.createAndAppend(t,"div","controlPanel","leftPanel"),o=i.createAndAppend(t,"div","controlPanel","rightPanel"),r=i.createAndAppend(s,"div"),a=i.createAndAppend(r,"input","nameInput");a.setAttribute("type","text"),a.setAttribute("placeholder","filename");const c=i.createAndAppend(s,"div"),d=i.createAndAppend(c,"button","opacity"),l=i.createAndAppend(c,"input","opacityInput","noDisplay");l.setAttribute("type","number");const h=i.createAndAppend(o,"div"),p=i.createAndAppend(h,"button","move"),u=i.createAndAppend(o,"div"),m=i.createAndAppend(u,"button","pen"),v=i.createAndAppend(u,"button","eraser"),f=i.createAndAppend(o,"div"),g=i.createAndAppend(f,"button","colorPicker"),y=i.createAndAppend(f,"button","bucket"),b=i.createAndAppend(o,"div");return{canvasBoard:e,cvsContainer:n,nameInput:a,opacityBtn:d,opacityInput:l,moveBtn:p,penBtn:m,eraserBtn:v,colorPickerBtn:g,bucketBtn:y,lockerBtn:i.createAndAppend(b,"button","locke","unlock"),settingBtn:i.createAndAppend(b,"button","setting")}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.default=class{constructor(e){this.inputEventListeners=[],this.preventAndStop=(e=>{e.preventDefault(),e.stopPropagation()}),this.drop=(e=>{this.preventAndStop(e);const{files:t}=e.dataTransfer;this.handleInputFiles(t)}),this.fileInputNode=e,this.logger=new i.default}init(){this.attachInputEvents(),this.logger.info("init fileInput successfully")}delete(){this.removeInputEvents()}registerEvents(e){this.inputEventListeners.push(e)}attachInputEvents(){this.fileInputNode.addEventListener("dragover",this.preventAndStop,!0),this.fileInputNode.addEventListener("drop",this.drop,!0)}removeInputEvents(){this.fileInputNode.removeEventListener("dragover",this.preventAndStop,!0),this.fileInputNode.removeEventListener("drop",this.drop,!0)}handleInputFiles(e){for(const t of e){const e=window.URL.createObjectURL(t),n=t.name.split(".")[0];this.informEventListeners(e,n)}}informEventListeners(e,t){this.inputEventListeners.forEach(n=>{n(e,t)})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(62);t.OutputPanel=class{constructor(e){this.name="image",this.pipelineUpdate=(e=>{this.drawImageDataOnCavas(e)}),this.lightnessBtn=(()=>{this.pipeline.addComponent(0)}),this.cancelDisplay=(()=>{document.getElementById("output").classList.remove("outputVisible")}),this.pipeline=new i.Pipeline(e)}init(){this.attachBtnEvents(),this.pipeline.init(this.pipelineUpdate)}updateOutputImage(e,t){this.displayOutputPanel(),this.adjustToParent(e.width,e.height),this.name=t,this.pipeline.setImageData(e)}displayOutputPanel(){document.getElementById("output").classList.add("outputVisible")}drawImageDataOnCavas(e){document.getElementById("outputCanvas").getContext("2d").putImageData(e,0,0),this.updateDownloadBtn()}attachBtnEvents(){const e=document.getElementById("lightnessBtn"),t=document.getElementById("cancel");e.addEventListener("click",this.lightnessBtn,!1),t.addEventListener("click",this.cancelDisplay,!1)}adjustToParent(e,t){const n=document.getElementById("outputCanvas"),i=n.parentNode,s=window.getComputedStyle(i),o=parseInt(s.width,10),r=parseInt(s.height,10);let a=1;a=o/r>e/t?r/t:o/e,n.width=e,n.height=t,window.requestAnimationFrame(()=>{n.style.width=`${e*a}px`,n.style.height=`${t*a}px`})}updateDownloadBtn(){const e=document.getElementById("download"),t=document.getElementById("outputCanvas").toDataURL("image/jpeg");e.setAttribute("href",t),e.setAttribute("download",this.name+".jpeg")}}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))(function(s,o){function r(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){e.done?s(e.value):new n(function(t){t(e.value)}).then(r,a)}c((i=i.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const s=n(0),o=n(63);t.Pipeline=class{constructor(e){this.pipeFlow=[],this.pipeLut={},this.readyToDelete=[],this.isChanged=!1,this.addComponent=(e=>{switch(e){case 0:this.createAndAppendComponent(0)}}),this.runEvent=(()=>{this.runPipeline(this.imageData)}),this.deleteEvent=(e=>{const{id:t}=e.detail;this.readyToDelete.push(t),this.runPipeline(this.imageData)}),this.parentNode=e}init(e){this.attachPipeEvents(),this.updateFunc=e,this.logger=new s.default}delete(){this.removePipeEvents()}setImageData(e){this.imageData=e,this.isChanged=!0,this.runPipeline(e).then(()=>{this.isChanged=!1})}attachPipeEvents(){this.parentNode.addEventListener("run",this.runEvent,!0),this.parentNode.addEventListener("delete",this.deleteEvent,!0)}removePipeEvents(){this.parentNode.removeEventListener("run",this.runEvent,!0),this.parentNode.removeEventListener("delete",this.deleteEvent,!0)}runPipeline(e){return i(this,void 0,void 0,function*(){const t=Promise.resolve({imageData:e,isChanged:this.isChanged}),n=yield this.pipeFlow.reduce((e,t)=>{const{component:n}=this.pipeLut[t];return e.then(e=>n.run(e))},t);this.cleanDeletedComponents(),this.updateFunc(n.imageData)})}cleanDeletedComponents(){for(;0!==this.readyToDelete.length;){const e=this.readyToDelete.pop();try{this.removeComponentFromPipe(e)}catch(e){this.logger.error(e)}}}createAndAppendComponent(e){const t=this.getID(e),n=this.getComponent(e,t,this.parentNode);this.addComponentToPipe(e,t,n),null!==this.imageData&&this.runPipeline(this.imageData)}getID(e){return Symbol(e)}getComponent(e,t,n){let i=null;switch(e){case 0:i=new o.default(t,n)}return i}addComponentToPipe(e,t,n){this.pipeFlow.push(t),this.pipeLut[t]={type:e,component:n}}removeComponentFromPipe(e){const t=this.pipeFlow.indexOf(e);if(-1===t)throw new Error("cannot find target id in pipeFlow");if(this.pipeFlow.splice(t,1),!Reflect.has(this.pipeLut,e))throw new Error("cannot find target component in pipeFut");Reflect.deleteProperty(this.pipeLut,e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(64),s=n(67);t.default=class extends s.default{constructor(e,t){super(e,"lightness",t);const n=new i.default,s=document.createElement("pipe-brightness");this.init(n,s)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(65),s=n(66),o={value:0};t.default=class extends s.default{constructor(){super(),this.lightnessWorker=new Worker(i)}getComputedImageData(e,t=o){return new Promise((n,i)=>{this.lightnessWorker.addEventListener("message",e=>{n(e.data)}),this.lightnessWorker.addEventListener("error",e=>{i(e)}),this.lightnessWorker.postMessage({imageData:e,params:t})})}}},function(e,t,n){e.exports=n.p+"lightnessData.worker.js"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{}},function(e,t,n){"use strict";var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))(function(s,o){function r(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){e.done?s(e.value):new n(function(t){t(e.value)}).then(r,a)}c((i=i.apply(e,t||[])).next())})};Object.defineProperty(t,"__esModule",{value:!0});const s=n(0),o=n(68);t.default=class{constructor(e,t,n){this.isVisible=!0,this.isDeleted=!1,this.isChanged=!1,this.localImageData=null,this.visibility=(e=>{e.stopPropagation(),this.isVisible=e.detail.isVisible,this.pipeEventEmitter.emitRunEvent()}),this.delete=(e=>{e.stopPropagation(),this.isDeleted=!0,this.pipeEventEmitter.emitDeleteEvent(),this.removeBtnEvents(),this.removeContentEvents(),this.removeSelfFromParentNode()}),this.changed=(e=>{e.stopPropagation(),this.params=e.detail,this.isChanged=!0,this.pipeEventEmitter.emitRunEvent()}),this.id=e,this.parentNode=n,this.logger=new s.default}init(e,t){this.dataCore=e,this.domCore=t,this.pipeEventEmitter=new o.default(t,this.id),this.appendSelfToParentNode(),this.attachContentEvents(),this.attachBtnEvents()}run({imageData:e,isChanged:t}){return i(this,void 0,void 0,function*(){const n=t||this.isChanged;return!1===this.isDeleted&&this.logger.info("params: ",this.params),null===this.localImageData?(this.logger.info("init, set default imageData"),this.localImageData=e,Promise.resolve({imageData:e,isChanged:t})):!1===this.isVisible?(this.logger.info("invisible, skip the component"),Promise.resolve({imageData:e,isChanged:t})):!0===this.isDeleted?(this.logger.info("deleted, remove self from dom"),Promise.resolve({imageData:e,isChanged:!0})):!1===n?(this.logger.info("unchanged, skip the component"),Promise.resolve({imageData:this.localImageData,isChanged:!1})):yield this.dataCore.getComputedImageData(e,this.params).then(e=>(this.logger.info("changed, run component successfully"),this.localImageData=e,this.isChanged=!1,Promise.resolve({imageData:e,isChanged:!0})),n=>(this.logger.error(n),this.localImageData=e,Promise.resolve({imageData:e,isChanged:t}))).catch(n=>(this.logger.error(n),this.localImageData=e,Promise.resolve({imageData:e,isChanged:t})))})}appendSelfToParentNode(){this.parentNode.appendChild(this.domCore)}removeSelfFromParentNode(){this.parentNode.removeChild(this.domCore)}attachBtnEvents(){this.domCore.addEventListener("displayToggle",this.visibility,!1),this.domCore.addEventListener("deleted",this.delete,!1)}removeBtnEvents(){this.domCore.removeEventListener("displayToggle",this.visibility,!1),this.domCore.removeEventListener("deleted",this.delete,!1)}attachContentEvents(){this.domCore.addEventListener("changed",this.changed,!1)}removeContentEvents(){this.domCore.removeEventListener("changed",this.changed,!1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t){this.node=e,this.id=t,this.createPipeEvents()}emitRunEvent(){this.node.dispatchEvent(this.runEvent)}emitDeleteEvent(){this.node.dispatchEvent(this.deleteEvent)}createPipeEvents(){const e={detail:{id:this.id},bubbles:!0,cancelable:!1,composed:!1};this.runEvent=new CustomEvent("run",e),this.deleteEvent=new CustomEvent("delete",e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(14),s=n(70),o=n(0),r=n(15),a=n(72),c=.005,d=3,l=70,h=300,p=.6;t.default=class extends r.default{constructor(e,t,n){super(e),this.windowSize=window,this.isPixelateProcessing=!1,this.isPixelateFocused=!1,this.isOpacityFocused=!1,this.isLocked=!1,this.delete=(()=>{this.removeMoveEvents(),this.removeLayerBtnEvents(),this.removeSettingBtnEvents(),this.removeToolsBtnEvents(),this.removeUtilsEvents(),this.removeSelfFromParentNode()}),this.updateCursorStyle=((e,t)=>{this.toggleCursorStyle(e),this.toggleCursorStyle(t)}),this.mousedown=(e=>{const{target:t,offsetX:n,offsetY:i,ctrlKey:s}=e;this.canAcceptMousedown(t)&&(this.updateMouseState(s),this.updateCurrentScaleRatio(),this.updateMousePosition(n,i))}),this.mousemove=(e=>{const{pageX:t,pageY:n,offsetX:i,buttons:s}=e;if(this.canAcceptMouseMove())if(this.canContinueMouseMove(s))switch(this.state){case 1:this.mousemoveForMove(t,n);break;case 2:this.mousemoveForScale(i)}else this.mouseup()}),this.mouseup=(()=>{this.state=0,this.moveRefBoardlWithinClientScope()}),this.moveUp=(()=>{const{nextSibling:e}=this.refDomsPackage.referenceBoard;if(null!==e){const{nextSibling:t}=e;null===t?this.moveTop():this.parentNode.insertBefore(this.refDomsPackage.referenceBoard,t)}}),this.moveTop=(()=>{this.parentNode.appendChild(this.refDomsPackage.referenceBoard)}),this.moveDown=(()=>{const{previousSibling:e}=this.refDomsPackage.referenceBoard;null!==e&&this.parentNode.insertBefore(this.refDomsPackage.referenceBoard,e)}),this.moveBottom=(()=>{const{firstChild:e}=this.parentNode;null===e||this.refDomsPackage.referenceBoard.isSameNode(e)||this.parentNode.insertBefore(this.refDomsPackage.referenceBoard,e)}),this.locker=(()=>{this.isLocked=!this.isLocked,this.updateLockerIcon()}),this.nameChange=(e=>{const{value:t}=e.target;this.setName(t)}),this.opacity=(()=>{this.updateOpacityInputAndBtn(),this.focusAndSelectOpacityInput(),this.isOpacityFocused=!0}),this.opacityBlur=(e=>{if(!0===this.isOpacityFocused)try{this.opacityChange(e)}catch(e){this.updateOpacityInputAndBtn(),this.isOpacityFocused=!1,this.logger.error(e)}}),this.opacityChange=(e=>{const{value:t}=e.target,n=parseInt(t,10);if("number"!=typeof n)throw new Error("please enter number");if(n>100||n<0)throw new Error("out of the range of opacity");this.changeOpacityOfContent(n),this.changeOpacityOfIcon(n),this.updateOpacityInputAndBtn(),this.isOpacityFocused=!1}),this.colorPicker=(()=>{this.state=3}),this.pickColor=(e=>{const{buttons:t,offsetX:n,offsetY:s}=e;if(3===this.state){if(2!==t){const[e,t,o]=this.getColorAt(n,s),r=new i.RGB({r:e,g:t,b:o});this.colorDial.changeColor(r)}this.state=0}}),this.pixelateActive=(()=>{this.updatePixelateInputAndBtn(),this.focusAndSelectPixelateInput(),this.isPixelateFocused=!0}),this.pixelateBlur=(e=>{if(!0===this.isPixelateFocused)try{this.pixelateChange(e)}catch(e){this.updatePixelateInputAndBtn(),this.isPixelateFocused=!1,this.logger.error(e)}}),this.pixelateChange=(e=>{const{value:t}=e.target,n=parseInt(t,10);if(!0===this.isPixelateProcessing)throw new Error("cannot run before end");if("number"!=typeof n)throw new Error("please enter number");if(n<1)throw new Error("out of the range of pixel size");this.updatePixelCanvasRendering(n),this.pixelateContentCanvas(n),this.updatePixelateInputAndBtn(),this.isPixelateFocused=!1}),this.windowResize=(()=>{this.windowSize=window,this.moveRefBoardlWithinClientScope()}),this.preventAndStop=(e=>{e.preventDefault(),e.stopPropagation()}),this.colorDial=n,this.parentNode=t,this.pixelate=new s.Pixelate,this.refDomsPackage=a.referenceTemplate(),this.initStateMachine(),this.logger=new o.default}init(e){this.convertBase64ToImage(e).then(e=>{this.attachMoveEvents(),this.attachLayerBtnEvents(),this.attachSettingBtnEvents(),this.attachToolsBtnEvents(),this.attachUtilsEvents(),this.displayImageOnCanvas(e),this.updateCurrentScaleRatio(),this.setCanvasParentNode(this.refDomsPackage.cvsContainer),this.appendSelfToParentNode(),this.logger.info("reference board init successfully")},e=>{this.logger.error("fail to convert base64 to image",e)})}convertBase64ToImage(e){return new Promise((t,n)=>{const i=new Image;i.onload=(()=>{t(i)}),i.onerror=(e=>{n(e)}),i.src=e})}initStateMachine(){const e=this;Reflect.defineProperty(this,"state",{get(){return this._state},set(t){e.updateCursorStyle(this._state,t),this._state=t,e.updateRefBoardNodeZIndex(),e.updateDetectLayer()}}),this.state=0}displayImageOnCanvas(e){const{width:t,height:n}=e;this.setWidth(t),this.setHeight(n),this.scaleImageToFitTheParentSize(e),this.drawImage(e,0,0,t,n),this.originImageData=this.getImageData()}scaleImageToFitTheParentSize(e){let{width:t,height:n}=e;const{clientWidth:i}=this.parentNode,s=i/d;if(t>s){const e=t/s;t=s,n/=e}this.setStyleWidth(t),this.setStyleHeight(n)}appendSelfToParentNode(){this.parentNode.appendChild(this.refDomsPackage.referenceBoard)}removeSelfFromParentNode(){this.parentNode.removeChild(this.refDomsPackage.referenceBoard)}toggleCursorStyle(e){const{cvsContainer:t}=this.refDomsPackage;switch(e){case 1:t.classList.toggle("cursorMove");break;case 2:t.classList.toggle("cursorResize");break;case 3:t.classList.toggle("cursorCrossHair")}}updateRefBoardNodeZIndex(){const{referenceBoard:e}=this.refDomsPackage;switch(this.state){case 0:case 3:e.classList.remove("tmpTopLayer");break;case 1:case 2:e.classList.add("tmpTopLayer")}}updateDetectLayer(){const{referenceBoard:e}=this.refDomsPackage,t=this.parentNode;switch(this.state){case 0:case 3:t.classList.add("noPointerEvents"),t.classList.add("initialPointerEventsForChildren"),e.classList.remove("initialPointerEvents");break;case 1:case 2:t.classList.remove("noPointerEvents"),t.classList.remove("initialPointerEventsForChildren"),e.classList.add("initialPointerEvents")}}attachMoveEvents(){const{referenceBoard:e}=this.refDomsPackage;e.addEventListener("mousedown",this.mousedown),e.addEventListener("mousemove",this.mousemove),e.addEventListener("mouseup",this.mouseup),this.parentNode.addEventListener("mousemove",this.mousemove,!0),this.parentNode.addEventListener("mouseup",this.mousemove,!0)}removeMoveEvents(){const{referenceBoard:e}=this.refDomsPackage;e.removeEventListener("mousedown",this.mousedown),e.removeEventListener("mousemove",this.mousemove),e.removeEventListener("mouseup",this.mouseup),this.parentNode.removeEventListener("mousemove",this.mousemove,!0),this.parentNode.removeEventListener("mouseup",this.mousemove,!0)}updateMouseState(e){this.state=!0===e?2:1}canAcceptMousedown(e){return this.refDomsPackage.cvsContainer.contains(e)&&0===this.state&&!1===this.isLocked}canAcceptMouseMove(){return 1===this.state||2===this.state}canContinueMouseMove(e){return 1===e}updateMousePosition(e,t){this.mouseOffsetPosition={offsetX:e,offsetY:t}}updateCurrentScaleRatio(){this.currentScaleRatio=this.getStyleWidth()/this.getWidth()}mousemoveForMove(e,t){const n=e-this.mouseOffsetPosition.offsetX,i=t-this.mouseOffsetPosition.offsetY-l;this.updateRefBoardNodePosition(n,i)}updateRefBoardNodePosition(e,t){const{referenceBoard:n}=this.refDomsPackage;window.requestAnimationFrame(()=>{n.style.left=e+"px",n.style.top=t+"px"})}mousemoveForScale(e){const t=e-this.mouseOffsetPosition.offsetX,n=this.getScaleRatioFromMoveDistance(t),i=this.currentScaleRatio+n,s=this.getWidth()*i,o=this.getHeight()*i;s>h&&(this.setStyleWidth(s),this.setStyleHeight(o))}getScaleRatioFromMoveDistance(e){return e*c}moveRefBoardlWithinClientScope(){const{referenceBoard:e}=this.refDomsPackage,{offsetLeft:t,offsetTop:n,offsetWidth:i,offsetHeight:s}=e,{innerWidth:o,innerHeight:r}=this.windowSize,a={x:t,y:n};t+20>=o?a.x=o-20:t+i<=20&&(a.x=20-i),n+20+l>=r?a.y=r-20-l:n+s<=20&&(a.y=20-s),this.updateRefBoardNodePosition(a.x,a.y)}attachLayerBtnEvents(){const{moveUpBtn:e,moveTopBtn:t,moveDownBtn:n,moveBottomBtn:i}=this.refDomsPackage;e.addEventListener("click",this.moveUp,!0),t.addEventListener("click",this.moveTop,!0),n.addEventListener("click",this.moveDown,!0),i.addEventListener("click",this.moveBottom,!0)}removeLayerBtnEvents(){const{moveUpBtn:e,moveTopBtn:t,moveDownBtn:n,moveBottomBtn:i}=this.refDomsPackage;e.removeEventListener("click",this.moveUp,!0),t.removeEventListener("click",this.moveTop,!0),n.removeEventListener("click",this.moveDown,!0),i.removeEventListener("click",this.moveBottom,!0)}attachSettingBtnEvents(){const{deleteBtn:e,lockerBtn:t,nameInput:n,opacityBtn:i,opacityInput:s}=this.refDomsPackage;e.addEventListener("click",this.delete,!0),t.addEventListener("click",this.locker,!0),n.addEventListener("change",this.nameChange,!0),i.addEventListener("click",this.opacity,!0),s.addEventListener("blur",this.opacityBlur,!0),s.addEventListener("change",this.opacityChange,!0)}removeSettingBtnEvents(){const{deleteBtn:e,lockerBtn:t,nameInput:n,opacityBtn:i,opacityInput:s}=this.refDomsPackage;e.removeEventListener("click",this.delete,!0),t.removeEventListener("click",this.locker,!0),n.removeEventListener("change",this.nameChange,!0),i.removeEventListener("click",this.opacity,!0),s.removeEventListener("blur",this.opacityBlur,!0),s.removeEventListener("change",this.opacityChange,!0)}updateLockerIcon(){const{lockerBtn:e}=this.refDomsPackage;e.classList.toggle("unlock"),e.classList.toggle("lock")}changeOpacityOfContent(e){const{cvsContainer:t}=this.refDomsPackage,n=e/100;window.requestAnimationFrame(()=>{t.style.opacity=n.toString()})}changeOpacityOfIcon(e){const{opacityBtn:t}=this.refDomsPackage,n=(100-(100-e)*p)/100;0===e?t.classList.add("opacityZero"):t.classList.remove("opacityZero"),window.requestAnimationFrame(()=>{t.style.opacity=n.toString()})}updateOpacityInputAndBtn(){const{opacityBtn:e,opacityInput:t}=this.refDomsPackage;t.classList.toggle("noDisplay"),e.classList.toggle("noDisplay")}focusAndSelectOpacityInput(){const{opacityInput:e}=this.refDomsPackage;e.focus(),e.select()}attachToolsBtnEvents(){const{cvsContainer:e,colorPickerBtn:t,pixelateBtn:n,pixelateInput:i}=this.refDomsPackage;t.addEventListener("click",this.colorPicker,!0),e.addEventListener("mousedown",this.pickColor,!0),e.addEventListener("contextmenu",this.contextmenu,!0),n.addEventListener("click",this.pixelateActive,!0),i.addEventListener("blur",this.pixelateBlur,!0),i.addEventListener("change",this.pixelateChange,!0)}removeToolsBtnEvents(){const{cvsContainer:e,colorPickerBtn:t,pixelateBtn:n,pixelateInput:i}=this.refDomsPackage;t.removeEventListener("click",this.colorPicker,!0),e.removeEventListener("mousedown",this.pickColor,!0),e.removeEventListener("contextmenu",this.contextmenu,!0),n.removeEventListener("click",this.pixelateActive,!0),i.removeEventListener("blur",this.pixelateBlur,!0),i.removeEventListener("change",this.pixelateChange,!0)}contextmenu(e){e.preventDefault(),e.stopPropagation()}pixelateContentCanvas(e){this.isPixelateProcessing=!0;const t={imageData:this.originImageData,widthPerPixel:e,heightPerPixel:e};this.pixelate.getPixelatedImageData(t).then(e=>{this.drawImageData(e),this.isPixelateProcessing=!1}).catch(e=>{this.logger.error(e),this.isPixelateProcessing=!1})}updatePixelCanvasRendering(e){1===e?this.shutDownPixelBoard():this.activePixelBoard()}updatePixelateInputAndBtn(){const{pixelateBtn:e,pixelateInput:t}=this.refDomsPackage;t.classList.toggle("noDisplay"),e.classList.toggle("noDisplay")}focusAndSelectPixelateInput(){const{pixelateInput:e}=this.refDomsPackage;e.focus(),e.select()}attachUtilsEvents(){const{referenceBoard:e}=this.refDomsPackage;window.addEventListener("resize",this.windowResize,!0),e.addEventListener("drop",this.preventAndStop,!0),e.addEventListener("dragover",this.preventAndStop,!0),e.addEventListener("contextmenu",this.preventAndStop,!0)}removeUtilsEvents(){const{referenceBoard:e}=this.refDomsPackage;window.removeEventListener("resize",this.windowResize,!0),e.removeEventListener("drop",this.preventAndStop,!0),e.removeEventListener("dragover",this.preventAndStop,!0),e.removeEventListener("contextmenu",this.preventAndStop,!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(71),s=n(0);t.Pixelate=class{constructor(){this.pixelateWorker=new i,this.logger=new s.default}getPixelatedImageData(e){return new Promise((t,n)=>{this.pixelateWorker.addEventListener("message",e=>{this.logger.info("run pixelate process successfully"),t(e.data.imageData)}),this.pixelateWorker.addEventListener("error",e=>{n(e)}),this.pixelateWorker.postMessage(e)})}}},function(e,t,n){e.exports=function(){return new Worker(n.p+"assets/js/pixelate.worker.js")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(4);t.referenceTemplate=(()=>{const e=i.createAndAppend(null,"div","board","referenceBoard","nonePointerEvents"),t=i.createAndAppend(e,"div","boardController"),n=i.createAndAppend(e,"div","boardContent"),s=i.createAndAppend(t,"div","controlPanel","leftPanel"),o=i.createAndAppend(t,"div","controlPanel","rightPanel"),r=i.createAndAppend(s,"div"),a=i.createAndAppend(r,"input","nameInput");a.setAttribute("type","text"),a.setAttribute("placeholder","name");const c=i.createAndAppend(s,"div"),d=i.createAndAppend(c,"button","opacity"),l=i.createAndAppend(c,"input","opacityInput","noDisplay");l.setAttribute("type","number");const h=i.createAndAppend(o,"div"),p=i.createAndAppend(h,"button","moveUp"),u=i.createAndAppend(h,"button","moveTop"),m=i.createAndAppend(o,"div"),v=i.createAndAppend(m,"button","moveDown"),f=i.createAndAppend(m,"button","moveBottom"),g=i.createAndAppend(o,"div"),y=i.createAndAppend(g,"button","colorPicker"),b=i.createAndAppend(g,"button","pixelate"),w=i.createAndAppend(g,"input","pixelateInput","noDisplay");w.setAttribute("type","number"),w.setAttribute("placeholder","1");const E=i.createAndAppend(o,"div");return{referenceBoard:e,cvsContainer:n,nameInput:a,opacityBtn:d,opacityInput:l,moveUpBtn:p,moveTopBtn:u,moveDownBtn:v,moveBottomBtn:f,colorPickerBtn:y,pixelateBtn:b,pixelateInput:w,lockerBtn:i.createAndAppend(E,"button","locke","unlock"),deleteBtn:i.createAndAppend(E,"button","delete")}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(74);t.PipeComponent=i.default;const s=n(75);t.SimpleSlider=s.default;const o=n(76);t.PipeBrightness=o.default;t.initCustomElements=(()=>{customElements.define("simple-slider",s.default),customElements.define("pipe-component",i.default),customElements.define("pipe-brightness",o.default)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),s=n(16);t.default=class extends s.default{constructor(){super(),this.logger=new i.default,this.isVisible=!0,this.isDeleted=!1,this.displayToggle=(()=>{this.isVisible=!this.isVisible,this.updateDisplayBtnIcon(),this.dispatchDisplayToggledEvent()}),this.delete=(()=>{this.isDeleted=!0,this.dispatchDeletedEvent()}),this.contentChanged=(e=>{!1!==this.isVisible&&!0!==this.isDeleted||e.stopPropagation()});const e=this.attachShadow({mode:"open"}),t=document.getElementById("pipe-component").content.cloneNode(!0);this.initDomsPackage(t),this.initDataDrivenAttributes(),this.addTarget(this.pipeComponentDoms.component),e.appendChild(t)}static get observedAttributes(){return["name"]}connectedCallback(){this.logger.info("Custom element added to page"),this.attachAllEvents()}disconnectedCallback(){this.logger.info("Custom element removed from page"),this.removeAllEvents()}adoptedCallback(){this.logger.info("Custom element moved to new page")}attributeChangedCallback(e,t,n){this.logger.info("Custom element "+e+" changed from "+t+" to "+n),this[e]=n}attachAllEvents(){this.attachBtnEvents(),this.attachContentEvents()}removeAllEvents(){this.removeBtnEvents(),this.removeContentEvents()}initDomsPackage(e){const t=e.querySelector(".component"),n=e.querySelector(".displayBtn"),i=n.querySelectorAll("img"),s=e.querySelector(".deleteBtn"),o=e.querySelector(".componentName"),r=e.querySelector(".componentContent");this.pipeComponentDoms={component:t,displayBtn:n,deleteBtn:s,nameSpan:o,displayImage:i[0],noDisplayImage:i[1],componentContent:r}}initDataDrivenAttributes(){const e=this;Reflect.defineProperty(this,"name",{get(){return this._name||"none"},set(t){this._name=t,e.updateNameSpan()}})}updateNameSpan(){const{nameSpan:e}=this.pipeComponentDoms;e.innerHTML=this.name}attachBtnEvents(){const{displayBtn:e,deleteBtn:t}=this.pipeComponentDoms;e.addEventListener("click",this.displayToggle,!0),t.addEventListener("click",this.delete,!0)}removeBtnEvents(){const{displayBtn:e,deleteBtn:t}=this.pipeComponentDoms;e.removeEventListener("click",this.displayToggle,!0),t.removeEventListener("click",this.delete,!0)}updateDisplayBtnIcon(){const{displayImage:e,noDisplayImage:t}=this.pipeComponentDoms;!0===this.isVisible?(e.classList.remove("noDisplay"),t.classList.add("noDisplay")):(e.classList.add("noDisplay"),t.classList.remove("noDisplay"))}dispatchDisplayToggledEvent(){this.dispatchCustomEvent("displayToggle",{isVisible:this.isVisible})}dispatchDeletedEvent(){this.dispatchCustomEvent("deleted",null)}attachContentEvents(){const{componentContent:e}=this.pipeComponentDoms;e.addEventListener("changed",this.contentChanged,!0)}removeContentEvents(){const{componentContent:e}=this.pipeComponentDoms;e.removeEventListener("changed",this.contentChanged,!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),s=n(16);t.default=class extends s.default{constructor(){super(),this.simpleSliderDomsRect={sliderBar:null,sliderBlock:null},this.logger=new i.default,this.canMove=!1,this.mousedown=(e=>{const{target:t,offsetX:n,offsetY:i}=e;this.canAcceptMouseDown(t)&&(this.updateMousePosition(n,i),this.canMove=!0)}),this.mousemove=(e=>{const{pageX:t,buttons:n}=e;this.canAcceptMouseMove()&&(this.canContinueMouseMove(n)?this.mousemoveForMove(t):this.mouseup())}),this.mouseup=(()=>{this.canMove=!1,this.recalculateAttributes(),this.dispatchChangedEvemt()}),this.sliderBarResize=(()=>{const{sliderBar:e}=this.simpleSliderDoms;this.simpleSliderDomsRect.sliderBar=e.getBoundingClientRect(),this.updateSliderDomsSizeAttributes()}),this.sliderBlockResize=(()=>{const{sliderBlock:e}=this.simpleSliderDoms;this.simpleSliderDomsRect.sliderBlock=e.getBoundingClientRect(),this.updateSliderDomsSizeAttributes()});const e=this.attachShadow({mode:"closed"}),t=document.getElementById("simple-slider").content.cloneNode(!0);this.initDomsPackage(t),this.initDataDrivenAttributes(),this.addTarget(this.simpleSliderDoms.slider),e.appendChild(t)}static get observedAttributes(){return["value","min","max"]}connectedCallback(){this.logger.info("Custom element added to page"),this.attachAllEvents(),this.updateSimpleSliderDomsClientRect(),this.updateRendering()}disconnectedCallback(){this.logger.info("Custom element removed from page"),this.removeAllEvents()}adoptedCallback(){this.logger.info("Custom element moved to new page"),this.updateSimpleSliderDomsClientRect(),this.updateRendering()}attributeChangedCallback(e,t,n){this.logger.info("Custom element "+e+" changed from "+t+" to "+n),this.valudateAndUpdateAttribute(e,n)}valudateAndUpdateAttribute(e,t){const n=parseInt(t,10);!0===this.isValidNumber(n)&&(this[e]=n)}isValidNumber(e){return!isNaN(e)}attachAllEvents(){this.attachSliderEvents(),this.attachUtilsEvents()}removeAllEvents(){this.removeSliderEvents(),this.removeUtilsEvents()}initDomsPackage(e){const t=e.querySelector(".slider"),n=t.querySelector(".sliderBar"),i=n.querySelector(".sliderBlock");this.simpleSliderDoms={slider:t,sliderBar:n,sliderBlock:i}}initDataDrivenAttributes(){const e=this;Reflect.defineProperty(this,"value",{get(){return this._valueOfSlider||0},set(t){this._valueOfSlider=e.getValidValue(t),e.updateRendering()},configurable:!1,enumerable:!1}),Reflect.defineProperty(this,"min",{get(){return this._minOfSlider||0},set(t){this._minOfSlider=e.getValidMin(t),e.recalculateAttributes()},configurable:!1,enumerable:!1}),Reflect.defineProperty(this,"max",{get(){return this._maxOfSlider},set(t){this._maxOfSlider=e.getValidMax(t),e.recalculateAttributes()},configurable:!1,enumerable:!1})}getValidValue(e){return e>this.max?this.max:e<this.min?this.min:e}getValidMin(e){return e>this.max?this.max:e}getValidMax(e){return e<this.min?this.min:e}recalculateAttributes(){const e=(this.max-this.min)*(this.leftOfSliderBlock/this.widthOfSliderBar)+this.min;!0===this.isValidNumber(e)&&(this.value=e)}updateRendering(){const e=this.max-this.min,t=(this.value-this.min)/e,n=this.widthOfSliderBar*t;!0===this.isValidNumber(n)&&(this.leftOfSliderBlock=n,this.updateSliderBlockNodeXPosition())}attachSliderEvents(){const{sliderBar:e,sliderBlock:t}=this.simpleSliderDoms;t.addEventListener("mousedown",this.mousedown,!0),t.addEventListener("mousemove",this.mousemove,!0),t.addEventListener("mouseup",this.mouseup,!0),e.addEventListener("mousemove",this.mousemove,!0)}removeSliderEvents(){const{sliderBar:e,sliderBlock:t}=this.simpleSliderDoms;t.removeEventListener("mousedown",this.mousedown,!0),t.removeEventListener("mousemove",this.mousemove,!0),t.removeEventListener("mouseup",this.mouseup,!0),e.removeEventListener("mousemove",this.mousemove,!0)}canAcceptMouseDown(e){return this.simpleSliderDoms.sliderBlock.isSameNode(e)&&!1===this.canMove}updateMousePosition(e,t){this.mouseOffsetPosition={offsetX:e,offsetY:t}}canAcceptMouseMove(){return!0===this.canMove}canContinueMouseMove(e){return 1===e}mousemoveForMove(e){const t=e-this.simpleSliderDomsRect.sliderBar.left-this.mouseOffsetPosition.offsetX;this.isSliderBlockInTheScopeOfSliderBar(t)&&(this.leftOfSliderBlock=t,this.updateSliderBlockNodeXPosition(),this.recalculateAttributes())}isSliderBlockInTheScopeOfSliderBar(e){const t=this.simpleSliderDomsRect.sliderBlock.width,n=this.simpleSliderDomsRect.sliderBar.width;return e>=0&&e+t<=n}updateSliderBlockNodeXPosition(){const{sliderBlock:e}=this.simpleSliderDoms;window.requestAnimationFrame(()=>{e.style.left=this.leftOfSliderBlock+"px"})}dispatchChangedEvemt(){this.dispatchCustomEvent("changed",{value:this.value})}attachUtilsEvents(){const{sliderBar:e,sliderBlock:t}=this.simpleSliderDoms;e.addEventListener("resize",this.sliderBarResize,!0),t.addEventListener("resize",this.sliderBlockResize,!0)}removeUtilsEvents(){const{sliderBar:e,sliderBlock:t}=this.simpleSliderDoms;e.removeEventListener("resize",this.sliderBarResize,!0),t.removeEventListener("resize",this.sliderBlockResize,!0)}updateSimpleSliderDomsClientRect(){this.sliderBarResize(),this.sliderBlockResize()}updateSliderDomsSizeAttributes(){const{sliderBar:e,sliderBlock:t}=this.simpleSliderDomsRect,n=null!==e?e.width:0,i=null!==t?t.width:0;this.widthOfSliderBar=n-i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class extends HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"}),t=document.getElementById("pipe-brightness").content.cloneNode(!0);e.appendChild(t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,